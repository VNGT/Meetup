org: tnntech
app: let-meet
service: server-side

custom:
  # secrets: ${file(secrets.json)}
  serverless-offline:
    host: 0.0.0.0 # For docker container hosting
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      cors: true
      inMemory: true
      migrate: true
      seed: true
    seed:
      dev:
        sources:
          - table: accounts
            sources: [./src/seeders/accounts.data.json]
          - table: events
            sources: [./src/seeders/events.data.json]
          - table: groups
            sources: [./src/seeders/groups.data.json]

plugins:
  - serverless-dynamodb-local
  - serverless-offline

resources:
  Resources:
    accounts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: accounts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    events:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: events
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    groups:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: groups
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

provider:
  name: aws
  runtime: nodejs12.x
  versionFunctions: false
  stage: dev
  environment:

functions:
  # Test Function
  test:
    handler: src/controllers/test.controller.test
    events:
      - http: get v1/test

  # Account Function
  get_account_by_id:
    handler: src/controllers/account.controller.getAccountById
    events:
      - http: get v1/account/{acctId}
  delete_account_by_id:
    handler: src/controllers/account.controller.deleteAccountById
    events:
      - http: delete v1/account/{acctId}
  update_account_by_id:
    handler: src/controllers/account.controller.updateAccountById
    events:
      - http: put v1/account/{acctId}
  create_account:
    handler: src/controllers/account.controller.createAccount
    events:
      - http: post v1/account/

  # Event Function
  get_event_by_id:
    handler: src/controllers/event.controller.getEventById
    events:
      - http: get v1/event/{acctId}
  delete_event_by_id:
    handler: src/controllers/event.controller.deleteEventById
    events:
      - http: delete v1/event/{acctId}
  update_event_by_id:
    handler: src/controllers/event.controller.updateEventById
    events:
      - http: put v1/event/{acctId}
  get_event:
    handler: src/controllers/event.controller.getEvent
    events:
      - http: get v1/event
  create_event:
    handler: src/controllers/event.controller.createEvent
    events:
      - http: post v1/event

  # Group Function
  create_group:
    handler: src/controllers/group.controller.createGroup
    events:
      - http: post v1/group
  get_group_by_id:
    handler: src/controllers/group.controller.getGroupById
    events:
      - http: get v1/group/{groupId}
  get_all_group:
    handler: src/controllers/group.controller.getAllGroup
    events:
      - http: get v1/group
  delete_group_by_id:
    handler: src/controllers/group.controller.deleteGroupById
    events:
      - http: delete v1/group/{groupId}
  update_group_by_id:
    handler: src/controllers/group.controller.updateGroupById
    events:
      - http: put v1/group/{groupId}